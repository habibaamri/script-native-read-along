"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var delegate;
var doneCallback;
var MySpeechDelegate = (function (_super) {
    __extends(MySpeechDelegate, _super);
    function MySpeechDelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MySpeechDelegate.prototype.speechSynthesizerDidStartSpeechUtterance = function (synthesizer, utterance) {
        // TODO
    };
    MySpeechDelegate.prototype.speechSynthesizerDidFinishSpeechUtterance = function (synthesizer, utterance) {
        if (doneCallback) {
            doneCallback();
        }
    };
    MySpeechDelegate.prototype.speechSynthesizerDidPauseSpeechUtterance = function (synthesizer, utterance) {
        // TODO
    };
    MySpeechDelegate.prototype.speechSynthesizerDidContinueSpeechUtterance = function (synthesizer, utterance) {
        // console.log("Continued speaking");
    };
    MySpeechDelegate.prototype.speechSynthesizerDidCancelSpeechUtterance = function (synthesizer, utterance) {
        // console.log("Cancelled speaking");
    };
    MySpeechDelegate.ObjCProtocols = [AVSpeechSynthesizerDelegate];
    return MySpeechDelegate;
}(NSObject));
// , {
// 	// The name for the registered Objective-C class.
// 	name: "MySpeechDelegate",
// 		// Declare that the native Objective-C class will implement the AVSpeechSynthesizerDelegate Objective-C protocol.
// 		protocols: [AVSpeechSynthesizerDelegate]
// };
var TNSTextToSpeech = (function () {
    function TNSTextToSpeech() {
        this._lastOptions = null;
    }
    TNSTextToSpeech.prototype.speak = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this._speechSynthesizer) {
                _this._speechSynthesizer = AVSpeechSynthesizer.alloc().init();
                _this._speechSynthesizer.delegate = new MySpeechDelegate();
            }
            if (!_this.isString(options.text)) {
                reject("Text is required to speak.");
                return;
            }
            _this._lastOptions = options;
            doneCallback = options.finishedCallback;
            // valid values for pitch are 0.5 to 2.0
            if (!_this.isNumber(options.pitch)) {
                options.pitch = 1.0;
            }
            else if (options.pitch < 0.5) {
                options.pitch = 0.5;
            }
            else if (options.pitch > 2.0) {
                options.pitch = 2.0;
            }
            // valid values are AVSpeechUtteranceMinimumSpeechRate to AVSpeechUtteranceMaximumSpeechRate
            if (!_this.isNumber(options.speakRate)) {
                options.speakRate =
                    AVSpeechUtterance.AVSpeechUtteranceMaximumSpeechRate / 4.0; // default rate is way too fast
            }
            else if (options.speakRate < AVSpeechUtterance.AVSpeechUtteranceMinimumSpeechRate) {
                options.speakRate =
                    AVSpeechUtterance.AVSpeechUtteranceMinimumSpeechRate;
            }
            else if (options.speakRate > AVSpeechUtterance.AVSpeechUtteranceMaximumSpeechRate) {
                options.speakRate =
                    AVSpeechUtterance.AVSpeechUtteranceMaximumSpeechRate;
            }
            // valid values for volume are 0.0 to 1.0
            if (!_this.isNumber(options.volume) || options.volume > 1.0) {
                options.volume = 1.0;
            }
            else if (options.volume < 0.0) {
                options.volume = 0.0;
            }
            var speechUtterance = AVSpeechUtterance.alloc().initWithString(options.text);
            if (_this.isString(options.locale) && _this.isValidLocale(options.locale)) {
                speechUtterance.voice = AVSpeechSynthesisVoice.voiceWithLanguage(options.locale);
            }
            else if (_this.isString(options.language) &&
                _this.isValidLocale(options.language)) {
                speechUtterance.voice = AVSpeechSynthesisVoice.voiceWithLanguage(options.language);
            }
            speechUtterance.pitchMultiplier = options.pitch;
            speechUtterance.volume = options.volume;
            speechUtterance.rate = options.speakRate;
            if (!_this.isBoolean(options.queue)) {
                options.queue = false;
            }
            if (!options.queue && _this._speechSynthesizer.speaking) {
                _this._speechSynthesizer.stopSpeakingAtBoundary(AVSpeechBoundary.AVSpeechBoundaryImmediate);
            }
            _this._speechSynthesizer.speakUtterance(speechUtterance);
            resolve();
        });
    };
    TNSTextToSpeech.prototype.pause = function (now) {
        this._speechSynthesizer.pauseSpeakingAtBoundary(now
            ? AVSpeechBoundary.AVSpeechBoundaryImmediate
            : AVSpeechBoundary.AVSpeechBoundaryWord);
    };
    TNSTextToSpeech.prototype.resume = function () {
        this._speechSynthesizer.continueSpeaking();
    };
    TNSTextToSpeech.prototype.destroy = function () {
        /// does iOS have anything to destroy/free resources???
        this._speechSynthesizer = null;
    };
    /**
     * Private Methods
     */
    TNSTextToSpeech.prototype.isString = function (elem) {
        return Object.prototype.toString.call(elem).slice(8, -1) === "String";
    };
    TNSTextToSpeech.prototype.isBoolean = function (elem) {
        return Object.prototype.toString.call(elem).slice(8, -1) === "Boolean";
    };
    TNSTextToSpeech.prototype.isNumber = function (elem) {
        return Object.prototype.toString.call(elem).slice(8, -1) === "Number";
    };
    // helper function to test whether language code has valid syntax
    TNSTextToSpeech.prototype.isValidLocale = function (locale) {
        var re = new RegExp("\\w\\w-\\w\\w");
        return re.test(locale);
    };
    return TNSTextToSpeech;
}());
exports.TNSTextToSpeech = TNSTextToSpeech;
